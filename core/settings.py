"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 5.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path
from dotenv import load_dotenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Load environment variables from .env at project root
load_dotenv(BASE_DIR / ".env")


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY', 'django-insecure--po5yv_%m+_8cnqc(u1))0-@97*xhc!6e@%vbzn9oljvsg4qo2')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DEBUG', 'True').lower() == 'true'

_hosts = os.environ.get('ALLOWED_HOSTS', '')
ALLOWED_HOSTS = [h.strip() for h in _hosts.split(',') if h.strip()] if _hosts else []

# CSRF trusted origins (comma-separated list of full scheme+host, e.g., https://yourname.pythonanywhere.com)
_csrf_trusted = os.environ.get('CSRF_TRUSTED_ORIGINS', '')
if _csrf_trusted:
    CSRF_TRUSTED_ORIGINS = [h.strip() for h in _csrf_trusted.split(',') if h.strip()]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sitemaps',  # For dynamic sitemap generation

    #3rd parties
    'rest_framework',
    'django_filters',
    'rest_framework.authtoken',
    'drf_spectacular',
    'corsheaders',
    # 'sentry_sdk.integrations.django' is not an app; Sentry SDK is initialized conditionally below

    # local apps
    'blog',
    'bots',
    'demo',
    'payments',
    'processing',
    'accounts',
    'portfolio',
    'analytics',

]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'analytics.middleware.AnalyticsMiddleware',  # Track page views
]

ROOT_URLCONF = 'core.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'core.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

_database_url = os.environ.get('DATABASE_URL')
if _database_url:
    try:
        import dj_database_url

        DATABASES['default'] = dj_database_url.parse(_database_url, conn_max_age=600)
    except ImportError:
        # dj-database-url not installed; fallback to default sqlite settings
        pass


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'
STATICFILES_DIRS = [BASE_DIR / 'static']
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'
# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
        "rest_framework.authentication.SessionAuthentication",
    ),
    "DEFAULT_FILTER_BACKENDS": ("django_filters.rest_framework.DjangoFilterBackend",),
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    "PAGE_SIZE": 10,
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
    "DEFAULT_THROTTLE_CLASSES": [
        "rest_framework.throttling.AnonRateThrottle",
        "rest_framework.throttling.UserRateThrottle",
    ],
    "DEFAULT_THROTTLE_RATES": {
        "anon": "60/min",
        "user": "120/min",
    },
}
AUTH_USER_MODEL = "accounts.Student"

# Email backend defaults (console in DEBUG; SMTP in production if configured)
EMAIL_BACKEND = os.environ.get(
    'EMAIL_BACKEND',
    'django.core.mail.backends.console.EmailBackend' if DEBUG else 'django.core.mail.backends.smtp.EmailBackend'
)
DEFAULT_FROM_EMAIL = os.environ.get('DEFAULT_FROM_EMAIL', 'no-reply@ai-services.local')

# SMTP configuration via environment variables (used when EMAIL_BACKEND is SMTP)
# These defaults keep local dev harmless; set in .env for real delivery
EMAIL_HOST = os.environ.get('EMAIL_HOST', 'localhost')
EMAIL_PORT = int(os.environ.get('EMAIL_PORT', '25') or 25)
EMAIL_USE_TLS = os.environ.get('EMAIL_USE_TLS', 'False').lower() == 'true'
EMAIL_USE_SSL = os.environ.get('EMAIL_USE_SSL', 'False').lower() == 'true'
EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER', '')
EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD', '')
SERVER_EMAIL = os.environ.get('SERVER_EMAIL', DEFAULT_FROM_EMAIL)

SPECTACULAR_SETTINGS = {
    "TITLE": "AI Notes-to-Chatbot API",
    "DESCRIPTION": "API for accounts, payments, processing, bots, reviews, and blog.",
    "VERSION": "1.0.0",
    "SERVE_INCLUDE_SCHEMA": False,
}

# App-specific environment flags and secrets
AUTO_APPROVE_COMMENTS = os.environ.get('AUTO_APPROVE_COMMENTS', 'True').lower() == 'true'

PAYSTACK_PUBLIC_KEY = (os.environ.get('PAYSTACK_PUBLIC_KEY', '') or '').strip()
PAYSTACK_SECRET_KEY = (os.environ.get('PAYSTACK_SECRET_KEY', '') or '').strip()
PAYSTACK_WEBHOOK_SECRET = (os.environ.get('PAYSTACK_WEBHOOK_SECRET', '') or '').strip()

BOTPRESS_DEMO_BOT_URL = os.environ.get('BOTPRESS_DEMO_BOT_URL', '')

AWS_ACCESS_KEY_ID = os.environ.get('AWS_ACCESS_KEY_ID', '')
AWS_SECRET_ACCESS_KEY = os.environ.get('AWS_SECRET_ACCESS_KEY', '')
AWS_STORAGE_BUCKET_NAME = os.environ.get('AWS_STORAGE_BUCKET_NAME', '')
AWS_S3_REGION_NAME = os.environ.get('AWS_S3_REGION_NAME', '')

# CORS
_cors = os.environ.get('CORS_ALLOWED_ORIGINS', '')
if _cors:
    CORS_ALLOWED_ORIGINS = [h.strip() for h in _cors.split(',') if h.strip()]
else:
    # allow all in dev; empty list in prod unless set
    CORS_ALLOW_ALL_ORIGINS = DEBUG

# Payments / Paystack
_allowed_currencies = os.environ.get('PAYSTACK_ALLOWED_CURRENCIES', 'NGN')
PAYSTACK_ALLOWED_CURRENCIES = [c.strip().upper() for c in _allowed_currencies.split(',') if c.strip()]

# Pricing catalog (major units). Server uses this to calculate amounts.
PRICING_CATALOG = {
    "NGN": {
        "trial": 2000,
        "starter": 10000,
        "standard": 14999,
        "extended": 19000,
        "single-course": 10000,
        "bundle-6": 50000,
    },
    "USD": {
        "trial": 10,
        "starter": 29,
        "standard": 49,
        "extended": 69,
        "single-course": 30,
        "bundle-6": 160,
    },
}

# Express add-on price (major units)
EXPRESS_ADDON_PRICE = {
    "NGN": 2000,
    "USD": 10,
}

# Allowed AI models for selection on checkout
AI_MODELS_ALLOWED = [
    "gpt-5",
    "gemini-2.5-flash",
]

# Static files storage for production
if not DEBUG:
    STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Caching (locmem by default; optional Redis via REDIS_URL)
CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.locmem.LocMemCache",
        "LOCATION": "unique-ai-services-cache",
    }
}
_redis_url = os.environ.get("REDIS_URL")
if _redis_url:
    CACHES["default"] = {
        "BACKEND": "django.core.cache.backends.redis.RedisCache",
        "LOCATION": _redis_url,
    }

# Conditional GET
USE_ETAGS = True

# Sentry (optional)
SENTRY_DSN = os.environ.get('SENTRY_DSN', '').strip()
if SENTRY_DSN:
    try:
        import sentry_sdk
        from sentry_sdk.integrations.django import DjangoIntegration

        sentry_sdk.init(
            dsn=SENTRY_DSN,
            integrations=[DjangoIntegration()],
            traces_sample_rate=float(os.environ.get('SENTRY_TRACES_SAMPLE_RATE', '0.0') or 0.0),
            send_default_pii=False,
            environment=os.environ.get('SENTRY_ENVIRONMENT', 'production'),
        )
    except Exception:
        pass

# Security hardening via env (prod only recommended)
SECURE_SSL_REDIRECT = os.environ.get('SECURE_SSL_REDIRECT', 'False').lower() == 'true'
SESSION_COOKIE_SECURE = os.environ.get('SESSION_COOKIE_SECURE', 'False').lower() == 'true'
CSRF_COOKIE_SECURE = os.environ.get('CSRF_COOKIE_SECURE', 'False').lower() == 'true'
SECURE_HSTS_SECONDS = int(os.environ.get('SECURE_HSTS_SECONDS', '0') or 0)
SECURE_HSTS_INCLUDE_SUBDOMAINS = os.environ.get('SECURE_HSTS_INCLUDE_SUBDOMAINS', 'False').lower() == 'true'
SECURE_HSTS_PRELOAD = os.environ.get('SECURE_HSTS_PRELOAD', 'False').lower() == 'true'

# Minimal request logging
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': os.environ.get('LOG_LEVEL', 'INFO'),
    },
}

# Disposable email protection (extend as needed)
DISPOSABLE_EMAIL_DOMAINS = set([
    # Common disposable domains (subset; extend in env for prod)
    'mailinator.com', 'guerrillamail.com', 'sharklasers.com', '10minutemail.com',
    'tempmail.com', 'tempmail.dev', 'tempmailo.com', 'trashmail.com',
    'fakeinbox.com', 'getnada.com', 'yopmail.com', 'mintemail.com',
    '*.tempmail.com', '*.yopmail.com',
])

BANNED_EMAIL_LOCALPARTS = set(['test', 'testing', 'admin', 'user', 'sample'])